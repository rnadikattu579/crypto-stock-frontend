name: Deploy Frontend to S3 and CloudFront

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  AWS_REGION: us-east-1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" > .env.production

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          # Use access keys (comment out if using OIDC role above)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html"

          # Upload index.html separately with different cache settings
          aws s3 cp dist/index.html s3://${{ secrets.S3_BUCKET_NAME }}/index.html \
            --cache-control "public, max-age=0, must-revalidate"

      - name: Invalidate CloudFront cache
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          else
            echo "CloudFront distribution ID not set, skipping cache invalidation"
          fi

      - name: Get CloudFront URL
        id: get-url
        continue-on-error: true
        run: |
          if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            DOMAIN=$(aws cloudfront get-distribution \
              --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --query 'Distribution.DomainName' \
              --output text)
            echo "cloudfront_url=https://$DOMAIN" >> $GITHUB_OUTPUT
            echo "CloudFront URL: https://$DOMAIN"
          else
            echo "CloudFront distribution ID not set, skipping"
          fi

      - name: Deployment Summary
        run: |
          echo "### Deployment Successful :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Bucket:** ${{ secrets.S3_BUCKET_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.get-url.outputs.cloudfront_url }}" ]; then
            echo "**CloudFront URL:** ${{ steps.get-url.outputs.cloudfront_url }}" >> $GITHUB_STEP_SUMMARY
          fi
